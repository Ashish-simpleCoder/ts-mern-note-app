{"version":3,"file":"static/js/registerpage.7a6c9445.chunk.js","mappings":"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","sources":["Components/HigherComponents/Form/Form.tsx","Components/HigherComponents/Form/FormFields/FormField.tsx","Components/HigherComponents/Form/FormFields/InputField.tsx","Components/HigherComponents/Form/FormFields/LabelField.tsx","Components/PureComponents/Error.tsx","Components/PureComponents/H3.tsx","Pages/Register/Register.modal.tsx","Pages/Register/Register.page.tsx"],"sourcesContent":["import { FormEvent, memo, ReactNode } from \"react\";\r\nimport styled, { css, CSSProperties } from 'styled-components'\r\n\r\n\r\n\r\nconst Form = memo(({children, no_bg, mode, handleSubmit, styles, animate}:{\r\n    children:ReactNode, no_bg?:boolean, mode?:string, handleSubmit?: ((e: FormEvent<HTMLFormElement>) => Promise<void>) | undefined\r\n    styles?:CSSProperties,\r\n    animate?:boolean\r\n})=>{\r\n\r\n    return(\r\n        <StyledForm onSubmit={(e)=>{\r\n                e.preventDefault()\r\n                handleSubmit && handleSubmit(e)\r\n            }}\r\n            style={styles}\r\n            no_bg={no_bg}\r\n            mode={mode}   //for margin-top\r\n            animate={animate}\r\n        >\r\n            {children}\r\n        </StyledForm>\r\n    )\r\n})\r\nexport default Form\r\n\r\n\r\n\r\nconst StyledForm = styled.form<{no_bg?:boolean, mode?:string, animate?:boolean}>`\r\n    height:45rem;\r\n    width:90%;\r\n    display:flex;\r\n    align-items:center;\r\n    flex-direction:column;\r\n    max-width:35rem;\r\n    background:var(--form-bg);\r\n\r\n    ${({mode})=>{\r\n        if(mode === 'login' || mode === 'register'){\r\n            return css`\r\n                margin: auto;\r\n                max-width:40rem;\r\n                margin-top:5rem;\r\n                border-radius:0.5rem;\r\n                box-shadow:0 0.3rem 0.3rem rgba(0,0,0,0.3);\r\n                padding:0 2rem 2rem 2rem;\r\n                //heading of the form\r\n                >h3{\r\n                    padding:1rem 0 2rem 0;\r\n                }\r\n                //containers of input and label\r\n                .div{\r\n                    padding:0 2rem;\r\n                    margin-top:2rem;\r\n                    width:100%;\r\n                    display:flex;\r\n                    justify-content:space-between;\r\n                    align-items:center;\r\n                }\r\n            `\r\n        }\r\n        if(mode === 'create_note'){\r\n            return css`\r\n                height:25rem;\r\n                @media (min-width:700px){\r\n                    height:50rem;\r\n                }\r\n            `\r\n        }\r\n    }}\r\n    ${({no_bg})=>{\r\n       if(no_bg === true) {\r\n           return css`\r\n            background:inherit;\r\n        `\r\n        }\r\n    }}\r\n    button{\r\n        margin-top:auto   //button will be at the bottom of the form\r\n    }\r\n\r\n    /* animate flag */\r\n    ${({animate})=>{\r\n        if(animate){\r\n            return css`\r\n                animation:animate_form 0.4s ease-in forwards;\r\n            `\r\n        }\r\n    }}\r\n\r\n    @keyframes animate_form{\r\n        0%{\r\n            opacity:0;\r\n            transform:translateX(-100%);\r\n        }\r\n        50%{\r\n            transform:translateX(50%);\r\n        }\r\n    }\r\n\r\n`","import { Children, cloneElement, memo, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FormField = memo(({children}:{children:JSX.Element[]})=>{\r\n    const [focus, setFocus] = useState(false)\r\n\r\n    return(\r\n        <StyledFormField>\r\n            {\r\n                Children.map(children, (child:JSX.Element)=>{\r\n                    if(typeof child.type === 'string') return child\r\n                    return cloneElement(child, {focus, setFocus})\r\n                })\r\n            }\r\n        </StyledFormField>\r\n    )\r\n})\r\nexport default FormField\r\n\r\n\r\nconst StyledFormField = styled.div`\r\n    display:flex;\r\n    align-items:center;\r\n    width:100%;\r\n    position:relative;\r\n    margin-top:5rem;\r\n\r\n    /* giving margin on email form field */\r\n    &:nth-of-type(1){\r\n        margin-top:3rem;\r\n    }\r\n\r\n    label{\r\n        position:absolute;\r\n        top:50%;\r\n        left:0;\r\n        transform:translate(4rem, -50%);\r\n        pointer-events:none;\r\n        transition:all 0.25s;\r\n    }\r\n    .transform{\r\n        color:var(--transform-label-clr);\r\n        transform:translate(1rem, -230%);\r\n        font-size:clamp(1.4rem, 1.5rem, 1.5vw);\r\n    }\r\n\r\n    >img{\r\n        height:2rem;\r\n        position:absolute;\r\n        top:50%;\r\n        left: 0.5rem;\r\n        transform:translateY(-50%);\r\n    }\r\n\r\n    >input{\r\n        width:100%;\r\n        padding:1rem 5rem 1rem 4rem;\r\n    }\r\n    input[type=\"password\"]{\r\n        padding-right:5rem;\r\n    }\r\n`","import { ChangeEvent, Dispatch, memo, SetStateAction, useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Img from '../../../PureComponents/Img'\r\n\r\n\r\ntype FieldProps =  {props:InputProps, setFocus?:Dispatch<SetStateAction<boolean>>, focus?:boolean}\r\n\r\nconst InputField = (({props, setFocus, focus}:FieldProps)=>{\r\n    const {state, name, handleChanges, type} = props\r\n    const [field_type, setFieldType] = useState(type)       //for changint the type of the password from text to password and so forth\r\n\r\n    const handleFocus = useCallback(()=>{\r\n        setFocus && setFocus(true)\r\n    } , [setFocus])\r\n\r\n    const handleBlur = useCallback((e)=>{\r\n        setFocus && setFocus(e.target.value.length>0 )\r\n    } , [setFocus])\r\n\r\n\r\n    const changePasswordType = useCallback(()=>{\r\n        setFieldType(v => (v === 'password' ? 'text' :'password'))\r\n    }, [])\r\n\r\n    const img_src = useMemo(() =>field_type === 'password' ? './imgs/hide.png' : './imgs/show.png', [field_type])\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n            <Img src={`./imgs/${name}.avif`} alt={name}/>\r\n            <StyledInput type={field_type} value={state} name={name}\r\n                onChange={handleChanges}\r\n                onFocus={handleFocus}\r\n                onBlur={handleBlur}\r\n                autoFocus={name === 'email'}    //if email or first field then autofocus\r\n                title='enter your credentails'\r\n            />\r\n            { type === 'password' && focus && <TogglePassword handleClick={changePasswordType} img_src={ img_src }/> }\r\n        </>\r\n    )\r\n})\r\nexport default InputField\r\n\r\n\r\nconst StyledInput = styled.input`\r\n    border:none;\r\n    outline:none;\r\n    height:4rem;\r\n    background:var(--login-input-bg);\r\n    font-size:clamp(1.6rem, 1.7rem, 1.7vw);\r\n    border-radius:0.5rem;\r\n\r\n    &:hover{\r\n        background:var(--input-hover-bg) !important;\r\n    }\r\n`\r\n\r\n\r\n\r\ntype InputProps = {\r\n    name:string,\r\n    state:string,\r\n    handleChanges: (e: ChangeEvent<HTMLInputElement>) => void\r\n    type:string\r\n}\r\n\r\n\r\nconst TogglePassword = memo(({handleClick, img_src}:TogglePassProps) => {\r\n    return (\r\n        <StyledTogglePassword onClick={handleClick}>\r\n            <Img src={img_src} cls='invert' alt='toggle' />\r\n        </StyledTogglePassword>\r\n    )\r\n})\r\n\r\n\r\n\r\nconst StyledTogglePassword = styled.div`\r\n    position:absolute;\r\n    right:1rem;\r\n    top:50%;\r\n    transform:translateY(-50%);\r\n    cursor: pointer;\r\n    z-index:3;\r\n`\r\ntype TogglePassProps = {\r\n    handleClick: () => void,img_src:string\r\n}","import styled from \"styled-components\"\r\ntype LabelProps = { text:string, focus?:string  }\r\n\r\nconst LabelField = (props:LabelProps)=> <StyledLabel className={props.focus && 'transform'}>{props.text}</StyledLabel>\r\nexport default LabelField\r\n\r\n\r\nconst StyledLabel = styled.label`\r\n    font-size:clamp(1.5rem, 1.6rem, 1.6vw);\r\n`","import styled from \"styled-components\"\r\n\r\nconst ErrorDisplayer = (({error}:{error:string})=>{\r\n    return(\r\n        <Styled>{error}</Styled>\r\n    )\r\n})\r\nexport default ErrorDisplayer\r\n\r\nconst Styled = styled.p`\r\n    color:red;\r\n    font-size:clamp(1.5rem,1.6rem,1.6vw);\r\n`","import { memo } from \"react\";\r\nimport styled, { CSSProperties } from \"styled-components\";\r\n\r\nconst H3 = memo(({text, styles, handleClick, cls}:{text:string, styles?:CSSProperties, handleClick?:() =>void, cls?:string})=>{\r\n    return(\r\n        <StyledH3 style={styles} onClick={handleClick} className={cls}>{text}</StyledH3>\r\n    )\r\n})\r\nexport default H3\r\n\r\nconst StyledH3 = styled.h3<{styles?:CSSProperties}>`\r\n    font-size:2.2rem;\r\n    font-weight:500;\r\n`","import { memo, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport FormField from \"../../Components/HigherComponents/Form/FormFields/FormField\";\r\nimport InputField from \"../../Components/HigherComponents/Form/FormFields/InputField\";\r\nimport LabelField from \"../../Components/HigherComponents/Form/FormFields/LabelField\";\r\nimport Button from \"../../Components/PureComponents/Button\";\r\nimport ErrorDisplayer from \"../../Components/PureComponents/Error\";\r\nimport Form from \"../../Components/HigherComponents/Form/Form\";\r\nimport H3 from \"../../Components/PureComponents/H3\";\r\nimport { useUserCtx } from \"../../Context/UserContext\";\r\nimport useRegister from \"../../Hooks/useRegister\";\r\n\r\n\r\nconst RegisterModal = memo(()=>{\r\n    const {handleSubmit, loader, errors, EmailProps, PasswordProps} = useRegister()\r\n\r\n    // if user is already logged in then go back\r\n    const history = useHistory()\r\n    const {user} = useUserCtx()\r\n    useEffect(() => {user._id && history.push('/')} , [history, user._id])\r\n\r\n\r\n    return(\r\n        <Form mode='register' handleSubmit={(e)=>handleSubmit(e, 'register')} animate={true}>\r\n            <H3  text='Register'  styles={{color:'var(--secondary-clr)'}}  />\r\n            <FormField>\r\n                <LabelField text='email'/>\r\n                <InputField props={EmailProps}/>\r\n            </FormField>\r\n            <FormField>\r\n                <LabelField text='password'/>\r\n                <InputField props={PasswordProps}/>\r\n            </FormField>\r\n            {  errors?.email && <ErrorDisplayer error={errors.email}/> }\r\n            {  errors?.password && <ErrorDisplayer error={errors.password}/> }\r\n            {  errors?.err && <ErrorDisplayer error={errors.err}/> }\r\n            <Button  text='submit'  mode='login_btn' loader={loader} />\r\n        </Form>\r\n    )\r\n})\r\nexport default RegisterModal","import RegisterModal from \"./Register.modal\"\r\n\r\nconst RegisterPage = () => <RegisterModal />\r\nexport default RegisterPage"],"names":["Form","memo","children","no_bg","mode","handleSubmit","styles","animate","StyledForm","onSubmit","e","preventDefault","style","styled","css","FormField","useState","focus","setFocus","StyledFormField","Children","child","type","cloneElement","props","state","name","handleChanges","field_type","setFieldType","handleFocus","useCallback","handleBlur","target","value","length","changePasswordType","v","img_src","useMemo","src","alt","StyledInput","onChange","onFocus","onBlur","autoFocus","title","TogglePassword","handleClick","StyledTogglePassword","onClick","cls","StyledLabel","className","text","error","Styled","H3","StyledH3","useRegister","loader","errors","EmailProps","PasswordProps","history","useHistory","user","useUserCtx","useEffect","_id","push","color","LabelField","InputField","email","Error","password","err","Button"],"sourceRoot":""}